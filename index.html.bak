<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover">
  <meta name="mobile-web-app-capable" content="yes">
  <meta name="apple-mobile-web-app-capable" content="yes">
  <meta name="apple-mobile-web-app-status-bar-style" content="default">
  <title>Chat with AI</title>
  <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/highlight.js@11.8.0/styles/github.min.css">
  <script src="https://cdn.jsdelivr.net/npm/highlight.js@11.8.0/lib/highlight.min.js"></script>
  <style>
    /* Global styles */
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    body {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: #2d3748;
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 20px;
    }

    /* Container common styles */
    #auth-container,
    #chat-container {
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(10px);
      border-radius: 20px;
      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
      padding: 2rem;
      width: 100%;
      max-width: 450px;
      transition: all 0.3s ease;
    }

    /* Login container styles */
    #auth-container {
      display: flex;
      flex-direction: column;
      gap: 1.5rem;
    }

    #auth-container h2 {
      color: #4a5568;
      font-size: 2rem;
      text-align: center;
      margin-bottom: 1rem;
    }

    .input-group {
      position: relative;
      margin-bottom: 1rem;
    }

    .input-group input {
      width: 100%;
      padding: 1rem 1.5rem;
      border: 2px solid #e2e8f0;
      border-radius: 12px;
      font-size: 1rem;
      transition: all 0.3s ease;
      background: white;
    }

    .input-group input:focus {
      border-color: #667eea;
      outline: none;
      box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    }

    .input-group input::placeholder {
      color: #a0aec0;
    }

    /* Button styles */
    button {
      padding: 1rem 2rem;
      border: none;
      border-radius: 12px;
      font-size: 1rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    #login-button {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      width: 100%;
    }

    #login-button:hover {
      transform: translateY(-2px);
      box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
    }

    /* Chat container styles */
    #chat-container {
      display: none;
      height: 100vh;
      height: -webkit-fill-available; /* 适配 iOS */
      max-height: 100vh;
      max-height: -webkit-fill-available; /* 适配 iOS */
      flex-direction: column;
      gap: 1rem;
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      padding: 1rem;
      padding-bottom: calc(1rem + env(safe-area-inset-bottom)); /* iOS 安全区域 */
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(10px);
    }

    #toggle-stream {
      position: absolute;
      top: 1rem;
      right: 1rem;
      z-index: 2;
      background: #48bb78;
      color: white;
      padding: 0.5rem 1rem;
      font-size: 0.875rem;
      border-radius: 20px;
    }

    #chat-box {
      flex: 1;
      background: #f8fafc;
      border-radius: 12px;
      padding: 1rem;
      overflow-y: auto;
      margin: 3rem 0 0.5rem 0;
      margin-bottom: env(safe-area-inset-bottom, 0.5rem);
      -webkit-overflow-scrolling: touch; /* iOS 滚动优化 */
    }

    #chat-box::-webkit-scrollbar {
      width: 6px;
    }

    #chat-box::-webkit-scrollbar-track {
      background: transparent;
    }

    #chat-box::-webkit-scrollbar-thumb {
      background-color: #cbd5e0;
      border-radius: 3px;
    }

    .message {
      padding: 1rem;
      border-radius: 16px;
      margin-bottom: 1rem;
      max-width: 85%;
      word-wrap: break-word;
      position: relative;
      animation: fadeIn 0.3s ease;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    }

    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(10px); }
      to { opacity: 1; transform: translateY(0); }
    }

    .message::before {
      content: '';
      position: absolute;
      bottom: -5px;
      width: 10px;
      height: 10px;
      transform: rotate(45deg);
    }

    .user {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      margin-left: auto;
      border-bottom-right-radius: 4px;
    }

    .user::before {
      right: 15px;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }

    .ai {
      background: white;
      border: 1px solid #e2e8f0;
      color: #2d3748;
      margin-right: auto;
      border-bottom-left-radius: 4px;
    }

    .ai::before {
      left: 15px;
      background: white;
      border-left: 1px solid #e2e8f0;
      border-bottom: 1px solid #e2e8f0;
    }

    #chat-input {
      background: white;
      border-radius: 16px 16px 0 0; /* 移动端底部圆角去除 */
      padding: 0.75rem;
      margin: 0;
      box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.05);
      position: relative;
      z-index: 2;
    }

    .input-container {
      display: flex;
      align-items: center;
      gap: 0.75rem;
      background: #f0f2f5;
      border-radius: 24px;
      padding: 0.5rem;
      margin-bottom: 0.5rem;
    }

    #message-input {
      flex: 1;
      border: none;
      background: transparent;
      padding: 0.75rem;
      font-size: 1rem;
      line-height: 1.5;
      color: #1a1a1a;
      resize: none;
      min-height: 24px;
      max-height: 150px;
    }

    #message-input:focus {
      outline: none;
    }

    #message-input::placeholder {
      color: #8e8e93;
    }

    #send-button {
      background: #6366f1;
      color: white;
      border: none;
      border-radius: 20px;
      padding: 0.75rem 1.25rem;
      font-size: 0.9375rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.2s ease;
      min-width: 80px;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    #send-button:hover {
      background: #4f46e5;
      transform: translateY(-1px);
    }

    #send-button:active {
      transform: translateY(0);
    }

    .action-buttons {
      display: flex;
      gap: 0.75rem;
      padding: 0.5rem 1rem;
      background: white;
      border-top: 1px solid rgba(0, 0, 0, 0.05);
    }

    .action-button {
      flex: 1;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 0.5rem;
      padding: 0.75rem;
      border-radius: 12px;
      font-size: 0.9375rem;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.2s ease;
      border: none;
      color: white;
      max-width: 160px;
    }

    #file-label {
      background: linear-gradient(135deg, #60a5fa, #3b82f6);
    }

    #file-label:hover {
      background: linear-gradient(135deg, #3b82f6, #2563eb);
      transform: translateY(-1px);
    }

    #camera-button {
      background: linear-gradient(135deg, #34d399, #10b981);
    }

    #camera-button:hover {
      background: linear-gradient(135deg, #10b981, #059669);
      transform: translateY(-1px);
    }

    .action-button:active {
      transform: translateY(0);
    }

    .file-text {
      font-size: 0.875rem;
      color: #6b7280;
      margin-left: 0.5rem;
    }

    @media (max-width: 480px) {
      .input-container {
        border-radius: 20px;
        padding: 0.375rem;
        margin-bottom: 0.375rem;
      }

      #message-input {
        padding: 0.625rem;
        font-size: 0.9375rem;
      }

      #send-button {
        padding: 0.625rem 1rem;
        min-width: 70px;
        font-size: 0.875rem;
      }

      .action-buttons {
        padding: 0.75rem 1rem calc(0.75rem + env(safe-area-inset-bottom, 20px)) 1rem;
      }

      .action-button {
        padding: 0.75rem;
        font-size: 0.875rem;
        min-height: 44px;
      }
    }

    .message p {
      margin: 0 0 1em 0;
    }

    .message p:last-child {
      margin-bottom: 0;
    }

    .message pre {
      background: rgba(0, 0, 0, 0.05);
      padding: 0.5em;
      border-radius: 4px;
      overflow-x: auto;
      margin: 0.5em 0;
    }

    .message code {
      font-family: 'Consolas', 'Monaco', monospace;
      font-size: 0.9em;
      padding: 0.2em 0.4em;
      border-radius: 3px;
    }

    .message:not(.user) code {
      background: rgba(0, 0, 0, 0.05);
    }

    .message.user code {
      background: rgba(255, 255, 255, 0.1);
    }

    .message ul, .message ol {
      margin: 0.5em 0;
      padding-left: 1.5em;
    }

    .message blockquote {
      border-left: 3px solid;
      margin: 0.5em 0;
      padding-left: 1em;
    }

    .message.user blockquote {
      border-color: rgba(255, 255, 255, 0.3);
    }

    .message:not(.user) blockquote {
      border-color: rgba(0, 0, 0, 0.1);
    }

    .message img {
      max-width: 100%;
      border-radius: 4px;
      margin: 0.5em 0;
    }

    .message table {
      border-collapse: collapse;
      margin: 0.5em 0;
      width: 100%;
    }

    .message th,
    .message td {
      border: 1px solid rgba(0, 0, 0, 0.1);
      padding: 0.4em 0.6em;
    }

    .message.user th,
    .message.user td {
      border-color: rgba(255, 255, 255, 0.1);
    }
  </style>
</head>
<body>
  <!-- Login interface -->
  <div id="auth-container">
    <h2>Welcome Back</h2>
    <div class="input-group">
      <input type="text" id="username" placeholder="Username" autocomplete="username">
    </div>
    <div class="input-group">
      <input type="password" id="password" placeholder="Password" autocomplete="current-password">
    </div>
    <button id="login-button">Sign In</button>
  </div>

  <!-- Chat interface -->
  <div id="chat-container">
    <button id="toggle-stream">Enable Stream Mode</button>
    <div id="chat-box"></div>
    <div id="input-area">
      <div class="input-container">
        <textarea id="message-input" placeholder="Type your message..." rows="1"></textarea>
        <button id="send-button">Send</button>
      </div>
      <div class="action-buttons">
        <label for="file-input" id="file-label" class="action-button">
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M12 15V3M12 3L8 7M12 3L16 7" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            <path d="M2 17L2.621 19.485C2.72915 19.9177 2.97882 20.3018 3.33033 20.5763C3.68184 20.8508 4.11501 20.9999 4.561 21H19.439C19.885 20.9999 20.3182 20.8508 20.6697 20.5763C21.0212 20.3018 21.2708 19.9177 21.379 19.485L22 17" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
          </svg>
          Upload
        </label>
        <input type="file" id="file-input" style="display: none;" multiple>
        <button id="camera-button" class="action-button">
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M12 16C13.6569 16 15 14.6569 15 13C15 11.3431 13.6569 10 12 10C10.3431 10 9 11.3431 9 13C9 14.6569 10.3431 16 12 16Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            <path d="M3 9C3 7.89543 3.89543 7 5 7H7.5C8.05228 7 8.5 6.55228 8.5 6C8.5 5.44772 8.94772 5 9.5 5H14.5C15.0523 5 15.5 5.44772 15.5 6C15.5 6.55228 15.9477 7 16.5 7H19C20.1046 7 21 7.89543 21 9V18C21 19.1046 20.1046 20 19 20H5C3.89543 20 3 19.1046 3 18V9Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
          </svg>
          Photo
        </button>
      </div>
    </div>
  </div>

  <script>
    const API_LOGIN_URL = 'https://floral-hill-cdd0.yamasun001-85b.workers.dev/login'; // Login endpoint
    const API_UPLOAD_URL = 'https://floral-hill-cdd0.yamasun001-85b.workers.dev/upload'; // File upload endpoint
    const API_CHAT_URL = 'https://floral-hill-cdd0.yamasun001-85b.workers.dev/chat'; // Corrected Chat endpoint

    const authContainer = document.getElementById('auth-container');
    const chatContainer = document.getElementById('chat-container');
    const loginButton = document.getElementById('login-button');
    const sendButton = document.getElementById('send-button');
    const toggleStreamButton = document.getElementById('toggle-stream');
    const chatBox = document.getElementById('chat-box');
    const messageInput = document.getElementById('message-input');
    const fileInput = document.getElementById('file-input');
    const cameraButton = document.getElementById('camera-button');

    let apiKey = null;
    let isStreamMode = false; // Default non-stream mode

    // Login logic
    loginButton.addEventListener('click', async () => {
      const username = document.getElementById('username').value.trim();
      const password = document.getElementById('password').value.trim();

      if (!username || !password) {
        alert('Please enter both username and password.');
        return;
      }

      try {
        const response = await fetch(API_LOGIN_URL, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ username, password })
        });

        const data = await response.json();
        if (response.ok && data.apiKey) {
          apiKey = data.apiKey;
          authContainer.style.display = 'none'; // Hide login interface
          chatContainer.style.display = 'flex'; // Show chat interface
          sendButton.disabled = false;
        } else {
          alert(data.error || 'Login failed.');
        }
      } catch (error) {
        alert('Unable to connect to the server.');
        console.error('Login error:', error);
      }
    });

    // Toggle stream mode
    toggleStreamButton.addEventListener('click', () => {
      isStreamMode = !isStreamMode;
      toggleStreamButton.textContent = isStreamMode ? 'Disable Stream Mode' : 'Enable Stream Mode';
      toggleStreamButton.classList.toggle('active', isStreamMode);
    });

    // Send message logic
    sendButton.addEventListener('click', async () => {
      const message = messageInput.value.trim();
      if (!message) return;
    
      appendMessage(message, 'user');
      messageInput.value = '';
      sendButton.disabled = true;
    
      try {
        console.log('Sending message to API:', API_CHAT_URL);
        console.log('Message payload:', { type: isStreamMode ? 'stream' : 'chat', message, userId: 'user123' });
    
        const response = await fetch(API_CHAT_URL, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${apiKey}`
          },
          body: JSON.stringify({ type: isStreamMode ? 'stream' : 'chat', message, userId: 'user123' })
        });
    
        console.log('Response status:', response.status);
    
        if (!response.ok) {
          const errorText = await response.text();
          console.error('Error response:', errorText);
          throw new Error(`Server error: ${response.status} - ${response.statusText}\n${errorText}`);
        }
    
        if (isStreamMode) {
          // 处理流式响应
          await handleStream(response);
        } else {
          // 处理非流式 JSON 响应
          const data = await response.json();
          console.log('Response body:', data);
          appendMessage(data.response || 'No response from AI.', 'ai');
        }
      } catch (error) {
        appendMessage(`Error: Unable to connect. Details: ${error.message}`, 'ai');
        console.error('Chat request error:', error);
      } finally {
        sendButton.disabled = false;
      }
    });

    // Handle file upload
    fileInput.addEventListener('change', async () => {
      const file = fileInput.files[0];
      if (file) {
        appendMessage(`Uploading file: ${file.name}`, 'user');

        const formData = new FormData();
        formData.append('file', file);

        try {
          const response = await fetch(API_UPLOAD_URL, {
            method: 'POST',
            headers: {
              'Authorization': `Bearer ${apiKey}`
            },
            body: formData
          });

          if (!response.ok) {
            const errorText = await response.text();
            console.error('Upload error response:', errorText);
            throw new Error(`Upload error: ${response.status} - ${response.statusText}\n${errorText}`);
          }

          const result = await response.json();
          console.log('Upload response:', result);
          appendMessage(result.analysis || 'File processed successfully.', 'ai');
        } catch (error) {
          appendMessage(`Error: Unable to upload file. Details: ${error.message}`, 'ai');
          console.error('File upload error:', error);
        }
      }
    });

    // Handle camera button
    cameraButton.addEventListener('click', () => {
      alert('Camera functionality is not yet implemented.');
    });

    async function handleStream(response) {
      const reader = response.body.getReader();
      const decoder = new TextDecoder();
      let buffer = ''; // 用于缓存解码后的数据
      let isDone = false; // 标记流式响应是否结束
    
      while (!isDone) {
        const { done, value } = await reader.read();
        if (done) {
          isDone = true;
          break;
        }
    
        buffer += decoder.decode(value, { stream: true });
    
        // 逐行处理
        const lines = buffer.split('\n');
        buffer = lines.pop(); // 保留未完整的一行
    
        for (const line of lines) {
          if (line.startsWith('event: ')) {
            const event = line.slice(7).trim();
            if (event === 'done') {
              isDone = true;
              break;
            }
          } else if (line.startsWith('data: ')) {
            const json = line.slice(6).trim(); // 去掉 'data: ' 前缀
            try {
              const parsed = JSON.parse(json);
              appendMessage(parsed.response || 'No response received.', 'ai');
            } catch (error) {
              console.error('Failed to parse SSE JSON:', error, json);
              appendMessage(`Error: Failed to parse SSE JSON. Details: ${error.message}`, 'ai');
            }
          }
        }
      }
    }
    
    // 初始化 marked 配置
    marked.setOptions({
      highlight: function(code, lang) {
        if (lang && hljs.getLanguage(lang)) {
          return hljs.highlight(code, { language: lang }).value;
        }
        return hljs.highlightAuto(code).value;
      },
      breaks: true,
      gfm: true
    });

    function appendMessage(content, className) {
      const message = document.createElement('div');
      message.className = `message ${className}`;
      // 使用 marked 解析 Markdown
      message.innerHTML = marked.parse(content);
      chatBox.appendChild(message);
      chatBox.scrollTop = chatBox.scrollHeight;
      
      // 高亮代码块
      message.querySelectorAll('pre code').forEach((block) => {
        hljs.highlightBlock(block);
      });
    }
  </script>
</body>
</html>
